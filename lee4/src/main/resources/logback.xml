<!DOCTYPE logback>
<!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 
例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志， 
日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名 例如log-level-2013-12-21.0.log 
其它级别的日志也是如此。 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 
若部署到Tomcat下，则在Tomcat下的logs文件中 3、Appender FILEERROR对应error级别，文件名以log-error-xxx.log形式命名 
FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名 FILEINFO对应info级别，文件名以log-info-xxx.log形式命名 
FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名 stdout将日志信息输出到控制上，为方便开发测试使用 -->

<!-- 级别包括：TRACE、DEBUG、INFO、WARN和ERROR，定义于ch.qos.logback.classic.Level类。
程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。
如果设置级别为INFO，则优先级高于等于INFO级别的日志信息将可以被输出,小于该级别的如DEBUG将不会被输出。
为确保所有logger都能够最终继承一个级别，根logger总是有级别，默认情况下，这个级别是DEBUG -->
<configuration>

	<!-- 此日志appender是为开发使用，用于控制台输出日志-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- 日志文件的格式 -->
        <encoder>
        <!-- ![CDATA[<content>]]通常使用它来让内容不被xml解析器解析，而是表示为纯文本 -->
        <!-- %d{}为日期 	 /t为制表符	%thread输出产生日志线程名 		%-5level输出日志级别(左对齐5个字符)		-->
        <!-- %-48logger{48}为输出logger名	-48为左对齐48个字符	{48}为最多48个字符 -->
        <!-- %msg为打印消息		%n为换行 -->
            <pattern><![CDATA[date:%d{yyyy-MM-dd HH:mm:ss}\tthread:%thread\tlevel:%-5level\tlogger:%-48logger{48}\tmsg:%msg%n]]></pattern>
        </encoder>
    </appender>
    
	<!-- 日志记录器，日期滚动记录 -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<!-- 日志文件编码方式 -->
        <Encoding>UTF-8</Encoding>
        <!-- 正在记录的日志文件的路径及文件名 -->
        <File>log/spring-jpetstore.log</File>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy
            class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  <!-- 按日期 -->
            <!-- 归档的日志文件的路径，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，
            	从而将当前日志文件或归档日志文件置不同的目录。 
              %d{yyyyMMdd}指定日期格式，%i指定索引 -->
            <FileNamePattern>log/spring-petstore-%d{yyyyMMdd}.log</FileNamePattern>
            <!-- 最大历史日志数 -->
            <MaxHistory>2</MaxHistory>
        </rollingPolicy>
        <!-- 日志文件的格式 -->
        <encoder>
            <Pattern><![CDATA[date:%d{yyyy-MM-dd HH:mm:ss}\tthread:%thread\tlevel:%-5level\tlogger:%-48logger{48}\tmsg:%msg%n]]></Pattern>
        </encoder>
    </appender>
    
	<!-- 为单独的包配置日志级别，若root的级别大于此级别， 此处级别也会输出 
	应用场景：生产环境一般不会将日志级别设置为trace或debug，但是为详细的记录SQL语句的情况， 
          可将hibernate的级别设置为debug，如此一来，日志文件中就会出现hibernate的debug级别日志， 而其它包则会按root的级别输出日志 -->
    <logger name="com.cb.lee">
        <level value="debug" />
    </logger>

    <logger name="org.springframework.core">
        <level value="warn" />
    </logger>
    <logger name="org.springframework.beans">
        <level value="warn" />
    </logger>
    <logger name="org.springframework.context">
        <level value="warn" />
    </logger>
    <logger name="org.springframework.web">
        <level value="warn" />
    </logger>
    <logger name="org.springframework.web.servlet">
        <level value="info" />
    </logger>
    <logger
        name="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <level value="info" />
    </logger>
    <logger name="org.springframework.security.core.userdetails">
        <level value="debug" />
    </logger>
    <logger
        name="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <level value="debug" />
    </logger>
    <logger name="jdbc.sqltiming">
        <level value="debug" />
    </logger>
    
 	<!-- 生产环境，将此级别配置为适合的级别，以名日志文件太多或影响程序性能 -->
    <root>
        <level value="warn" />
        <!-- 生产环境将请stdout去掉 -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ROLLING" />
    </root>
</configuration>
